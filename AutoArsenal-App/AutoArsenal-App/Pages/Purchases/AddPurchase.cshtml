@page
@model AutoArsenal_App.Pages.Purchases.AddPurchaseModel
@{
    ViewData["Title"] = "Add Purchase";
}

<!-- Page Title -->
<div class="pagetitle">
    <h1>@ViewData["Title"]</h1>
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item active" aria-current="page">
                <a asp-page="../Index">Home</a>
            </li>
            <li class="breadcrumb-item active" aria-current="page">
                <a asp-page="./Purchases">Purchases</a>
            </li>
            <li class="breadcrumb-item active" aria-current="page">@ViewData["Title"]</li>
        </ol>
    </nav>
</div>
<!-- End Page Title -->
<!-- Error message -->
@if (TempData["ErrorOnServer"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        Error: @TempData["ErrorOnServer"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
<!-- End Error message -->
<!-- Add new Purchase Card -->
<section class="section">
    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between">
                    <h5 class="card-title">
                        New Purchase <span>| @DateTime.Now.ToString("MMM dd, yyyy")</span>
                    </h5>
                    <div class="d-flex align-items-center">
                        <button class="btn btn-secondary mx-1" onclick="goBack()">Cancel</button>
                        <form method="post" asp-page-handler="SavePurchases">
                            <input type="hidden" asp-for="Purchases" id="purchases" />
                            <input type="hidden" asp-for="PurchaseDetails" id="purchaseDetails" />
                            <input type="hidden" asp-for=" WarehouseId" id="warehouse" />
                            <button type="submit" class="btn btn-primary mx-1" onclick="savePurchases()">Save</button>
                        </form>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <!-- Product name -->
                        <div class="col-5">
                            <div class="form-floating mt-2">
                                <select class="form-select" id="productName" aria-label="Default select example"
                                        onchange="loadManufacturer()">
                                    <option value="-1" selected>Select Product</option>
                                    @if (Model.Products != null)
                                    {
                                        foreach (var product in Model.Products)
                                        {
                                            <option value="@product.ID"> @product.ProductName </option>
                                        }
                                    }
                                </select>
                                <label for="productName">Product Name</label>
                            </div>
                        </div>
                        <!-- Manufacturer Name -->
                        <div class="col-6">
                            <div class="form-floating mt-2">
                                <input class="form-control" id="manufacturerName" placeholder="Manufacturer Name"
                                       disabled />
                                <label for="manufacturerName">Manufacturer Name</label>
                            </div>
                        </div>

                        <div class="col-1"></div>
                    </div>

                    <div class="row">
                        <!-- Product Category -->
                        <div class="col-5">
                            <div class="form-floating mt-2">
                                <select class="form-select" id="productCategory" aria-label="Default select example"
                                        onchange="loadManufacturer()">
                                    <option value="-1" selected>Select Product Category</option>
                                    @if (Model.ProductCategories != null)
                                    {
                                        foreach (var lookup in Model.Lookups)
                                        {
                                            if (lookup.Category == "Product_Category")
                                            {
                                                <option value="@lookup.ID"> @lookup.Value </option>
                                            }
                                        }
                                    }
                                </select>
                                <label for="productCategory">Product Category</label>
                            </div>
                        </div>
                        <!-- Cost Price -->
                        <div class="col-6">
                            <div class="form-floating mt-2">
                                <input type="number" class="form-control" id="costPrice" placeholder="Cost Price"
                                       value="0" min="0" oninput="validity.valid||(value='');"
                                       onchange="loadTotalAmount()" />
                                <label for="costPrice">Cost Price</label>
                            </div>
                        </div>

                        <div class="col-1"></div>
                    </div>

                    <div class="row">
                        <!-- Product Quantity -->
                        <div class="col-5">
                            <div class="form-floating mt-2">
                                <input type="number" class="form-control" id="productQuantity"
                                       onchange="loadTotalAmount()" placeholder="Product Quantity" value="0" min="0"
                                       oninput="validity.valid||(value='');" />
                                <label for="productQuantity">Product Quantity</label>
                            </div>
                        </div>

                        <!-- Total Amount -->
                        <div class="col-6">
                            <div class="form-floating mt-2">
                                <input type="number" class="form-control" id="totalAmount" placeholder="Total Amount"
                                       value="0.00" min="0" oninput="validity.valid||(value='');" disabled />
                                <label for="totalAmount">Total Amount</label>
                            </div>
                        </div>

                        <div class="col-1"></div>
                    </div>

                    <div class="row">
                        <!-- Delivering -->
                        <div class="col-5">
                            <div class="form-floating mt-2">
                                <select class="form-select" id="deliverOption" aria-label="Default select example">
                                    <option value="0" selected>Shop</option>

                                </select>
                                <label for="deliverOption">Deliver To</label>
                            </div>
                        </div>

                        <div class="col-1 text-end d-flex align-items-center" style="height: 100%">
                            <!-- Add Product Button -->
                            <button type="button" class="btn btn-lg btn-primary" onclick="addProduct()">Add</button>
                        </div>

                        <div class="col-6"></div>
                    </div>

                    <hr />

                    <!-- Entering payment area -->
                        <div class="row">
                            <div class="col-5">
                                <!-- Payment Method -->
                                <div class="form-floating mt-2">
                                    <select class="form-select" id="methodType" aria-label="Default select example"
                                            asp-for="Pay.PaymentMethod" required>
                                        <option value="-1" selected>Select Payment Method</option>
                                    @if (Model.Lookups != null)
                                    {
                                        foreach (var lk in Model.Lookups)
                                        {
                                            if (lk.Category == "Payment_Method")
                                            {
                                                 <option value="@lk.ID"> @lk.Value </option>
                                            }
                                        }
                                    }
                                    </select>
                                    <label for="methodType">Payment Method</label>
                                </div>
                            </div>
                            <div class="col-6">
                                <!-- Payment Account -->
                                <div class="form-floating mt-2">
                                    <input type="text" class="form-control" id="account" placeholder="Payment Account"
                                           asp-for="Pay.PaymentAccount" />
                                    <label for="account">Payment Account</label>
                                </div>
                            </div>
                            <div class="col-1 text-end d-flex align-items-center" style="height: 100%"></div>
                        </div>
                        
                        <div class="row">
                            <div class="col-5">
                                <!-- Total Amount -->
                                <div class="form-floating mt-2">
                                    <input type="number" class="form-control" id="totalAmount2" placeholder="Total Amount"
                                           value="0.00" min="1" oninput="validity.valid||(value='');" disabled />
                                    <label for="totalAmount2">Total Amount</label>
                                </div>
                            </div>

                            <div class="col-6">
                                <!-- Paid Amount -->
                                <div class="form-floating mt-2">
                                    <input type="number" class="form-control" id="paidAmount" placeholder="Paid Amount"
                                           value="0.00" min="0" oninput="validity.valid||(value='');"
                                           asp-for="Pay.PaidAmount" />
                                    <label for="paidAmount">Paid Amount</label>
                                </div>
                            </div>
                            <div class="col-1 text-end d-flex align-items-center" style="height: 100%"></div>
                        </div>

                    <!-- Purchase Tables -->
                    <div class="row mt-4">
                        <div class="col">
                            <div class="table-responsive">
                                <table id="purchasesTable"
                                       class="table table-hover table-striped table-bordered text-center">
                                    <thead class="table-dark">
                                        <tr>
                                            <th scope="col">#</th>
                                            <th scope="col">Product Name</th>
                                            <th scope="col">Category</th>
                                            <th scope="col">Manufacturer</th>
                                            <th scope="col">Cost Price</th>
                                            <th scope="col">Quantity</th>
                                            <th scope="col">Amount</th>
                                            <th scope="col">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody class="table-group-divider">
                                        <!-- Will be loaded later -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


<!-- JAVASCRIPT SECTION -->
@section Scripts {

    <!-- Table Settings -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Table Settings
            var table = $('#purchasesTable').DataTable({
                paging: true,
                lengthChange: false,
                searching: false,
                ordering: true,
                info: true,
                autoWidth: false,
                language: {
                    emptyTable: "No data available",
                    info: "Showing _START_ to _END_ of _TOTAL_ entries",
                    infoEmpty: "Showing 0 to 0 of 0 entries",
                    infoFiltered: "(filtered from _MAX_ total entries)",
                    zeroRecords: "No matching records found",
                    search: "Search:",
                }
            });
        });
    </script>

    <!-- Other Settings -->
    <script>
        // Load data from server-side Model into client-side variables
        var products = @Html.Raw(Json.Serialize(Model.Products));
        var productCategories = @Html.Raw(Json.Serialize(Model.ProductCategories));
        var inventories = @Html.Raw(Json.Serialize(Model.Inventories));
        var lookups = @Html.Raw(Json.Serialize(Model.Lookups));
        var warehouses = @Html.Raw(Json.Serialize(Model.Warehouses));
        var manufacturers = @Html.Raw(Json.Serialize(Model.Manufacturers));
        var purchaseDetailsList = [];

        // Add Product to a list and to the datatable also
        function addProduct() {
            var productId = document.getElementById("productName").value;
            var productCategoryId = document.getElementById("productCategory").value;
            var productQuantity = parseInt(document.getElementById("productQuantity").value);
            var costPrice = parseFloat(document.getElementById("costPrice").value);

            if (productId === "-1" || productCategoryId === "-1" || productQuantity <= 0 || costPrice <= 0) {
                alert("Please fill all the fields correctly.");
                return;
            }

            var product = products.find(p => p.id == productId);
            var category = productCategories.find(pc => pc.productId == productId && pc.category == productCategoryId);
            var manufacturer = category ? manufacturers.find(m => m.id == category.manufacturerId) : null;

            console.log("Data", category);

            // Check if the same product of the same category exists in the purchase details list
            var existingIndex = purchaseDetailsList.findIndex(function (detail) {
                return detail.productCategoryId == productCategoryId && detail.manufacturerId == (manufacturer ? manufacturer.id : null);
            });

            if (existingIndex !== -1) {
                // Update quantity
                purchaseDetailsList[existingIndex].quantity += productQuantity;
            } else {
                // Add new purchase detail
                var purchaseDetail = {
                    productId: -1,
                    quantity: productQuantity,
                    productCategoryId: category.id,
                    manufacturerId: manufacturer ? manufacturer.id : null,
                    unitPrice: costPrice,
                };

                purchaseDetailsList.push(purchaseDetail);
            }

            // Add or update the product in the datatable
            var table = $('#purchasesTable').DataTable();
            if (existingIndex !== -1) {
                // Update row with the new quantity
                table.row(existingIndex).data([
                    existingIndex + 1,
                    product ? product.productName : "",
                    category ? lookups.find(l => l.id == productCategoryId).value : "",
                    manufacturer ? manufacturer.name : "",
                    costPrice,
                    purchaseDetailsList[existingIndex].quantity,
                    (purchaseDetailsList[existingIndex].quantity * costPrice).toFixed(2),
                    '<button type="button" class="btn btn-danger" onclick="removeProduct(this)">Remove</button>'
                ]).draw(false);
            } else {
                // Add new row
                table.row.add([
                    purchaseDetailsList.length,
                    product ? product.productName : "",
                    category ? lookups.find(l => l.id == productCategoryId).value : "",
                    manufacturer ? manufacturer.name : "",
                    costPrice,
                    productQuantity,
                    (productQuantity * costPrice).toFixed(2),
                    '<button type="button" class="btn btn-danger" onclick="removeProduct(this)">Remove</button>'
                ]).draw(false);
            }
            console.log(purchaseDetailsList)

            // Clear the fields
            document.getElementById("productName").value = "-1";
            document.getElementById("productCategory").value = "-1";
            document.getElementById("manufacturerName").value = "";
            document.getElementById("costPrice").value = "0";
            document.getElementById("productQuantity").value = "0";
            document.getElementById("totalAmount").value = "0.00";

            // Recalculate total amount
            var totalAmount = saleDetailsList.reduce((total, item) => {
                var category = productCategories.find(pc => pc.productId == productId && pc.id == item.productCategoryId);
                return total + item.quantity * category.salePrice;
            }, 0);
            var totalAmountElement = document.getElementById("totalAmount2");
            totalAmountElement.value = totalAmount.toFixed(2);
        }

        // Remove Product from the list and datatable
        function removeProduct(element) {
            var table = $('#purchasesTable').DataTable();
            var row = table.row($(element).parents('tr'));
            var index = row.index();
            row.remove().draw(false);

            // Remove the product from the purchaseDetailsList
            purchaseDetailsList.splice(index, 1);

            // Update the row numbers in the table
            table.rows().every(function (index) {
                var rowData = this.data();
                rowData[0] = index + 1;
                this.data(rowData).draw(false);
            });

            // Recalculate total amount
            var totalAmount = saleDetailsList.reduce((total, item) => {
                var category = productCategories.find(pc => pc.productId == productId && pc.id == item.productCategoryId);
                return total + item.quantity * category.salePrice;
            }, 0);
            var totalAmountElement = document.getElementById("totalAmount2");
            totalAmountElement.value = totalAmount.toFixed(2);
        }

        // Load Manufacturer based on selected product and category
        function loadManufacturer() {
            var productId = document.getElementById("productName").value;
            var productCategoryId = document.getElementById("productCategory").value;

            if (productId === "-1" || productCategoryId === "-1") {
                return;
            }

            var product = products.find(p => p.id == productId);
            var category = productCategories.find(pc => pc.productId == productId && pc.category == productCategoryId);
            var manufacturer = category ? manufacturers.find(m => m.id == category.manufacturerId) : null;
            var inventory = inventories.find(i => i.id == category.inventoryId);
            if (inventory) {
                var warehouse = warehouses.find(w => w.id == inventory.warehouseId);
                if (warehouse) {
                    document.getElementById("deliverOption").innerHTML = '';
                    document.getElementById("deliverOption").innerHTML += '<option value="0">Shop</option>';
                    document.getElementById("deliverOption").innerHTML += '<option value="' + warehouse.id + '">' + warehouse.name + '</option>';
                }
                else {
                    document.getElementById("deliverOption").innerHTML = '';
                    document.getElementById("deliverOption").innerHTML += '<option value="0">Shop</option>';
                    warehouses.forEach(w => {
                        document.getElementById("deliverOption").innerHTML += '<option value="' + w.id + '">' + w.name + '</option>';
                    })
                }
            }

            document.getElementById("manufacturerName").value = manufacturer ? manufacturer.name : "";
        }

        // Loading Total amount based on quantity and cost price
        function loadTotalAmount() {
            var productQuantity = parseInt(document.getElementById("productQuantity").value);
            var costPrice = parseFloat(document.getElementById("costPrice").value);

            if (productQuantity <= 0 || costPrice <= 0) {
                return;
            }

            var totalAmount = productQuantity * costPrice;
            document.getElementById("totalAmount").value = totalAmount.toFixed(2);
        }

        // Go Back
        function goBack() {
            window.history.back();
        }

        // Save Purchases
        function savePurchases() {
            //handle if list is empty
            if (purchaseDetailsList == null || purchaseDetailsList.length == 0) {
                alert("Please add a product to the sale.");
                return;
            }

            var temp = {
                id: -1,
                addedBy: 1,
                dateOfPurchase: new Date().toISOString().split('T')[0],
                paymentId: -1,
                isDeleted: false
            }

            document.getElementById("purchases").value = JSON.stringify(temp);;
            document.getElementById("purchaseDetails").value = JSON.stringify(purchaseDetailsList);
            document.getElementById("warehouse").value = document.getElementById("deliverOption").value;
            console.log(purchaseDetailsList)
        }
    </script>

}