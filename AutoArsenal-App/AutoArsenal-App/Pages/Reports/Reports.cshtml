@page
@model AutoArsenal_App.Pages.Reports.ReportsModel
@{
    ViewData["Title"] = "Reports";
}
<div class="pagetitle">
    <h1>@ViewData["Title"]</h1>
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item active" aria-current="page">
                <a asp-page="../Index">Home</a>
            </li>
            <li class="breadcrumb-item active" aria-current="page">@ViewData["Title"]</li>
        </ol>
    </nav>
</div>

<!-- Error message -->
@if (TempData["ErrorOnServer"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        Error: @TempData["ErrorOnServer"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
<!-- End Error message -->

<div class="row">
    <div class="col-md-6">
        <div class="row">
            <div class="col-6">
                <div class="card" style="height: 13rem">
                    <div class="card-body d-flex flex-row justify-content-between align-items-center">
                        <div style="padding-left: 10px; flex-grow: 1;">
                            <h1 class="text-center" id="totalSales">Rs. @Model.TotalSales </h1>
                        </div>
                        <div class="ms-auto">
                            <a class="btn btn-sm btn-primary d-block mb-2">
                                <i class="bi bi-eye"></i> View
                            </a>
                            <a id="downloadSalesReportButton" class="btn btn-sm btn-success d-block">
                                <i class="bi bi-save"></i> Save
                            </a>
                        </div>
                    </div>
                    <div class="card-footer text-center">
                        <h4 style="color: GrayText">Total Sales</h4>
                    </div>
                </div>

            </div>
            <div class="col-6">
                <div class="card" style="height: 13rem">
                    <div class="card-body d-flex flex-row justify-content-between align-items-center">
                        <div style="padding-left: 10px; flex-grow: 1;">
                            <h1 class="text-center" id="totalProducts">@Model.ProductCount</h1>
                        </div>
                        <div class="ms-auto">
                            <a class="btn btn-sm btn-primary d-block mb-2" href="/Products/AllProducts">
                                <i class="bi bi-eye"></i> View
                            </a>
                            <a id="downloadProductsReportButton" class="btn btn-sm btn-success d-block">
                                <i class="bi bi-save"></i> Save
                            </a>
                        </div>
                    </div>
                    <div class="card-footer text-center">
                        <h4 style="color: GrayText">Total Products</h4>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-6">
                <div class="card" style="height: 13rem">
                    <div class="card-body d-flex flex-row justify-content-between align-items-center">
                        <div style="padding-left: 10px; flex-grow: 1;">
                            <h1 class="text-center" id="numberOfEmployees">@Model.EmployeeCount</h1>
                        </div>
                        <div class="ms-auto">
                            <a class="btn btn-sm btn-primary d-block mb-2" href="/Users/Employees">
                                <i class="bi bi-eye"></i> View
                            </a>
                            <a id="downloadEmployeesReportButton" class="btn btn-sm btn-success d-block">
                                <i class="bi bi-save"></i> Save
                            </a>
                        </div>
                    </div>
                    <div class="card-footer text-center">
                        <h4 style="color: GrayText">No. of Employees</h4>
                    </div>
                </div>
            </div>
            <div class="col-6">
                <div class="card" style="height: 13rem">
                    <div class="card-body d-flex flex-row justify-content-between align-items-center">
                        <div style="padding-left: 10px; flex-grow: 1;">
                            <h1 class="text-center" id="numberOfCustomers">@Model.CustomerCount</h1>
                        </div>
                        <div class="ms-auto">
                            <a class="btn btn-sm btn-primary d-block mb-2" href="/Users/Customers">
                                <i class="bi bi-eye"></i> View
                            </a>
                            <a id="downloadCustomersReportButton" class="btn btn-sm btn-success d-block">
                                <i class="bi bi-save"></i> Save
                            </a>
                        </div>
                    </div>
                    <div class="card-footer text-center">
                        <h4 style="color: GrayText">No. of Customers</h4>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bar Chart -->
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <div class="row align-items-center">
                    <div class="col">
                        <h5 class="card-title">
                            Quarterly Sales<span id="yearSpan"> | @DateTime.Now.Year</span>
                        </h5>
                    </div>
                    <div class="col-auto">
                        <div class="input-group">
                            <span class="input-group-text">
                                <button type="button" class="btn btn-sm btn-primary" onclick="decrementYear()">-</button>
                            </span>
                            <input type="number" class="form-control" min="2000" step="1" value="2024" id="yearBox" style="width:5rem;" readonly onmousew heel="return false;" />
                            <span class="input-group-text">
                                <button type="button" class="btn btn-sm btn-success" onclick="incrementYear()">+</button>
                            </span>
                        </div>
                    </div>
                </div>
                <div id="barChart"></div>
            </div>
        </div>
    </div>
    <!-- End Bar Chart -->
</div>

<div class="row">
    <!-- Line Chart -->
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Line Chart<span> | Profit/Loss </span></h5>
                <div id="lineChart"></div>
            </div>
        </div>
    </div>
    <!-- End Line Chart -->
    <!-- Donut Chart -->
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Donut Chart</h5>
                <div id="donutChart"></div>
            </div>
        </div>
    </div>
    <!-- End Donut Chart -->
</div>

<div id="salesReport" style="display:none;">
    <h1 id="reportTitle" class="text-center">Sales Report</h1>
    <!-- Table structure -->
    <table id="salesTable" class="table table-hover table-striped table-bordered text-center">
        <thead class="table-dark">
            <tr>
                <th scope="col">#</th>
                <th scope="col">Sale ID</th>
                <th scope="col">Employee</th>
                <th scope="col">Customer</th>
                <th scope="col">Date</th>
                <th scope="col">Paid</th>
                <th scope="col">Payment ID</th>
            </tr>
        </thead>
        <tbody class="table-group-divider">
            @if (Model.Sales != null && Model.Persons != null)
            {
                int count = 1;
                @foreach (Models.Sale sale in Model.Sales)
                {
                    if (!sale.IsDeleted)
                    {
                        Models.Person employee = Model.Persons.Find(p => p.ID == sale.EmployeeID);
                        Models.Person customer = Model.Persons.Find(p => p.ID == sale.CustomerID);
                        <tr>
                            <td>@count</td>
                            <td>@sale.ID</td>
                            <td>@(employee.FirstName + " " + employee.LastName)</td>
                            <td>@(customer.FirstName + " " + customer.LastName)</td>
                            <td>@sale.DateOfSale.ToString("yyyy-MM-dd hh:mm:ss")</td>
                            <td>@Model.remainings[count - 1]</td>
                            <td>@sale.PaymentID</td>
                        </tr>
                        count++;
                    }
                }
            }
            else
            {
                <tr>
                    <td colspan="7">No records found</td>
                </tr>
            }
        </tbody>
    </table>
</div>
<div id="productsReport" style="display:none;">
    <h1 id="reportTitle" class="text-center">Products Report</h1>
    <!-- Table structure -->
    <div class="table-responsive">
        <table id="productsTable" class="table table-hover table-striped table-bordered text-center">
            <thead class="table-dark">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Product</th>
                    <th scope="col">Category</th>
                    <th scope="col">Description</th>
                    <th scope="col">Sale Price</th>
                    <th scope="col">Status</th>
                </tr>
            </thead>
            <tbody class="table-group-divider">
                @if (Model.Products != null && Model.ProductCategories != null && Model.Lookups != null && Model.Inventories != null)
                {
                    int count = 1;
                    @foreach (var productCategory in Model.ProductCategories)
                    {
                        if (!productCategory.IsDeleted)
                        {
                            Models.Product product = Model.Products.Find(p => p.ID == productCategory.ProductId);
                            Models.Inventory inventory = Model.Inventories.Find(i => i.ID == productCategory.InventoryId);
                            string category = Model.Lookups.Find(l => l.ID == productCategory.Category).Value;
                            string manufacturer = Model.Manufacturers.Find(m => m.ID == productCategory.ManufacturerId).Name;
                            <tr>
                                <td>@(count++)</td>
                                <td>@product.ProductName</td>
                                <td>@category</td>
                                <td>@product.ProductDescription</td>
                                <td>@productCategory.SalePrice.ToString()</td>
                                @if (inventory.StockInShop <= 10 || inventory.StockInShop == null)
                                {
                                    <td>Out of Stock</td>
                                }
                                else if (inventory.StockInShop > 10 && inventory.StockInShop <= 35)
                                {
                                    <td>Low Stock</td>
                                }
                                else
                                {
                                    <td>In Stock</td>
                                }
                            </tr>
                        }
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">No records found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<div id="employeesReport" style="display:none;">
    <h1 id="reportTitle" class="text-center">Employees Report</h1>
    <div class="table-responsive">
        <!-- Table with stripped rows -->
        <table id="empTable" class="table table-hover table-striped table-bordered text-center">
            <thead class="table-dark">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Name</th>
                    <th scope="col">Designation</th>
                    <th scope="col">Salary</th>
                    <th scope="col">Joining Date</th>
                    <th scope="col">Contact</th>
                </tr>
            </thead>
            <tbody class="table-group-divider">
                @if (Model.Employees != null && Model.Persons != null && Model.Lookups != null)
                {
                    int count = 1;
                    @foreach (var employee in Model.Employees)
                    {
                        Models.Person person = Model.Persons.Find(p => p.ID == employee.ID);
                        if (person.Status == 8)
                        {
                            string gender = Model.Lookups.Find(l => l.ID == person.Gender).Value;
                            string designation = Model.Lookups.Find(l => l.ID == employee.Role).Value;

                            <tr>
                                <td>@(count++)</td>
                                <td>@(person.FirstName + " " + person.LastName)</td>
                                <td>@designation</td>
                                <td>@employee.Salary</td>
                                <td>@employee.JoiningDate.ToString("dd MMMM, yyyy")</td>
                                <td>@person.Contact</td>
                            </tr>
                        }
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">No records found</td>
                    </tr>
                }

            </tbody>
        </table>
        <!-- End Table with stripped rows -->
    </div>
</div>
<div id="customersReport" style="display:none;">
    <h1 id="reportTitle" class="text-center">Customers Report</h1>
    <div class="table-responsive">
        <!-- Table with stripped rows -->
        <table id="custTable" class="table table-hover table-striped table-bordered text-center">
            <thead class="table-dark">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Name</th>
                    <th scope="col">Gender</th>
                    <th scope="col">Contact</th>
                    <th scope="col">Address</th>
                    <th scope="col">Trustworthy</th>
                    <th scope="col">Credit</th>
                    <th scope="col">Status</th>
                </tr>
            </thead>
            <tbody class="table-group-divider">
                @if (Model.Customers != null && Model.Persons != null && Model.Lookups != null)
                {
                    int count = 1;
                    @foreach (var customer in Model.Customers)
                    {
                        Models.Person person = Model.Persons.Find(p => p.ID == customer.ID);
                        if (person.Status == 8)
                        {
                            <tr>
                                <td>@(count++)</td>
                                <td>@(person.FirstName + " " + person.LastName)</td>
                                <td>@Model.Lookups.Find(l => l.ID == person.Gender).Value</td>
                                <td>@person.Contact</td>
                                <td>@(person.StreetAddress + ", " + person.City + ", " + person.Province + ", " + person.Country)</td>
                                <td>@(customer.IsTrustworthy ? "Yes" : "No")</td>
                                <td>@customer.Credit</td>
                                <td>@Model.Lookups.Find(l => l.ID == person.Status).Value</td>
                            </tr>
                        }
                    }
                }
                else
                {
                    <tr>
                        <td colspan="8">No records found</td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            var table = $('#custTable').DataTable({
                paging: false,
                lengthChange: false,
                searching: false,
                ordering: false,
                info: false,
                autoWidth: true,
                language: {
                    emptyTable: "No data available",
                    info: "Showing _START_ to _END_ of _TOTAL_ entries",
                    infoEmpty: "Showing 0 to 0 of 0 entries",
                    infoFiltered: "(filtered from _MAX_ total entries)",
                    zeroRecords: "No matching records found",
                    search: "Search:",
                }
            });
            // Download PDF function for sales table
            $('#downloadCustomersReportButton').on('click', function () {
                // Show the table
                $('#customersReport').css('display', 'block');

                // Generate PDF
                var element = document.getElementById('customersReport');
                html2pdf(element, {
                    margin: 1,
                    filename: 'customers_report.pdf',
                    image: { type: 'jpeg', quality: 0.98 },
                    html2canvas: { scale: 2 },
                    jsPDF: { unit: 'in', format: 'a4', orientation: 'landscape' },
                }).then(function (pdf) {
                    console.log('PDF generated successfully');
                    $('#customersReport').css('display', 'none');
                });
            });
        });
        $(document).ready(function () {
            var table = $('#empTable').DataTable({
                paging: false,
                lengthChange: false,
                searching: false,
                ordering: false,
                info: false,
                autoWidth: true,
                language: {
                    emptyTable: "No data available",
                    info: "Showing _START_ to _END_ of _TOTAL_ entries",
                    infoEmpty: "Showing 0 to 0 of 0 entries",
                    infoFiltered: "(filtered from _MAX_ total entries)",
                    zeroRecords: "No matching records found",
                    search: "Search:",
                }
            });
            // Download PDF function for sales table
            $('#downloadEmployeesReportButton').on('click', function () {
                // Show the table
                $('#employeesReport').css('display', 'block');

                // Generate PDF
                var element = document.getElementById('employeesReport');
                html2pdf(element, {
                    margin: 1,
                    filename: 'employees_report.pdf',
                    image: { type: 'jpeg', quality: 0.98 },
                    html2canvas: { scale: 2 },
                    jsPDF: { unit: 'in', format: 'a4', orientation: 'landscape' },
                }).then(function (pdf) {
                    console.log('PDF generated successfully');
                    $('#employeesReport').css('display', 'none');
                });
            });
        });
        $(document).ready(function () {
            var table = $('#productsTable').DataTable({
                paging: false,
                lengthChange: false,
                searching: false,
                ordering: false,
                info: false,
                autoWidth: true,
                language: {
                    emptyTable: "No data available",
                    info: "Showing _START_ to _END_ of _TOTAL_ entries",
                    infoEmpty: "Showing 0 to 0 of 0 entries",
                    infoFiltered: "(filtered from _MAX_ total entries)",
                    zeroRecords: "No matching records found",
                    search: "Search:",
                }
            });
            // Download PDF function for sales table
            $('#downloadProductsReportButton').on('click', function () {
                // Show the table
                $('#productsReport').css('display', 'block');

                // Generate PDF
                var element = document.getElementById('productsReport');
                html2pdf(element, {
                    margin: 1,
                    filename: 'products_report.pdf',
                    image: { type: 'jpeg', quality: 0.98 },
                    html2canvas: { scale: 2 },
                    jsPDF: { unit: 'in', format: 'a4', orientation: 'landscape' },
                }).then(function (pdf) {
                    console.log('PDF generated successfully');
                    $('#productsReport').css('display', 'none');
                });
            });
        });
        $(document).ready(function () {
            var table = $('#salesTable').DataTable({
                paging: false,
                lengthChange: false,
                searching: false,
                ordering: false,
                info: false,
                autoWidth: true,
                language: {
                    emptyTable: "No data available",
                    info: "Showing _START_ to _END_ of _TOTAL_ entries",
                    infoEmpty: "Showing 0 to 0 of 0 entries",
                    infoFiltered: "(filtered from _MAX_ total entries)",
                    zeroRecords: "No matching records found",
                    search: "Search:",
                }
            });
            // Download PDF function for sales table
            $('#downloadSalesReportButton').on('click', function () {
                // Show the table
                $('#salesReport').css('display', 'block');

                // Generate PDF
                var element = document.getElementById('salesReport');
                html2pdf(element, {
                    margin: 1,
                    filename: 'sales_report.pdf',
                    image: { type: 'jpeg', quality: 0.98 },
                    html2canvas: { scale: 2 },
                    jsPDF: { unit: 'in', format: 'a4', orientation: 'landscape' },
                }).then(function (pdf) {
                    console.log('PDF generated successfully');
                    $('#salesReport').css('display', 'none');
                });
            });
        });
    </script>
    <script>
        var barChart = null;
        var donutChart = null;
        const sales = @Html.Raw(Json.Serialize(Model.Sales));
        const saleDetails = @Html.Raw(Json.Serialize(Model.SaleDetails));
        const products = @Html.Raw(Json.Serialize(Model.Products));
        const productCategories = @Html.Raw(Json.Serialize(Model.ProductCategories));
        const employees = @Html.Raw(Json.Serialize(Model.Employees));
        const customers = @Html.Raw(Json.Serialize(Model.Customers));
        const persons = @Html.Raw(Json.Serialize(Model.Persons));

        // Function to calculate the total sale amount for each transaction
        function calculateTotalSaleAmount(saleId) {
            let totalSaleAmount = 0;
            const saleDetail = saleDetails.filter(detail => detail.saleID === saleId);
            if (!saleDetail) return 0;
            saleDetail.forEach(detail => {
                const productCategory = productCategories.find(category => category.id === detail.productCategoryID);
                if (!productCategory) return 0;
                totalSaleAmount += detail.quantity * productCategory.salePrice;
            });
            return totalSaleAmount;
        }
        function calculateQuarterlySales(year) {
            const quarterlySales = {
                "Jan-March": 0,
                "April-June": 0,
                "July-Sept": 0,
                "Oct-Dec": 0
            };

            sales.forEach(sale => {
                const saleYear = new Date(sale.dateOfSale).getFullYear();
                if (saleYear === year) {
                    const saleMonth = new Date(sale.dateOfSale).getMonth();
                    const saleAmount = calculateTotalSaleAmount(sale.id);
                    if (saleMonth >= 0 && saleMonth < 3) {
                        quarterlySales["Jan-March"] += saleAmount;
                    } else if (saleMonth >= 3 && saleMonth < 6) {
                        quarterlySales["April-June"] += saleAmount;
                    } else if (saleMonth >= 6 && saleMonth < 9) {
                        quarterlySales["July-Sept"] += saleAmount;
                    } else {
                        quarterlySales["Oct-Dec"] += saleAmount;
                    }
                }
            });

            return quarterlySales;
        }

        document.addEventListener("DOMContentLoaded", () => {
            let currentYear = new Date().getFullYear();
            filterDataByYear(currentYear);
            document.getElementById('yearSpan').innerText = " | " + currentYear;

            renderDonutChart();
            // Dummy data for charts
            const dummyData = [10, 20, 30, 40, 50];

            // Line Chart
            new ApexCharts(document.querySelector("#lineChart"), {
                series: [{
                    name: 'Series 1',
                    data: dummyData,
                }],
                chart: {
                    type: 'line',
                    height: 350,
                },
                xaxis: {
                    categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May'],
                },
            }).render();

        });

        function renderDonutChart() {
            var data = employeesAndTheirCount();
            let labels = Object.keys(data);
            let values = Object.values(data);
            let chartContainer = document.getElementById("donutChart");
            donutChart = new ApexCharts(chartContainer, {
                series: values,
                chart: {
                    type: "donut",
                    height: 350,
                    toolbar: { show: true },
                },
                labels: labels,
            });

            donutChart.render();
        }
        function employeesAndTheirCount() {
            //key: employee name value: count ofsales made by him//her
            let e = {};
            sales.forEach(sale => {
                var person = persons.find(p => p.id == sale.employeeID);
                var name = person.firstName + " " + person.lastName;

                if (e[name]) {
                    e[name] += 1;
                } else {
                    e[name] = 1;
                }
            });
            return e;
        }

        // Increment the year value
        function incrementYear() {
            let yearBox = document.getElementById("yearBox");
            let currentValue = parseInt(yearBox.value);
            yearBox.value = currentValue + 1;
            filterDataByYear(currentValue + 1);
        }

        // Decrement the year value
        function decrementYear() {
            let yearBox = document.getElementById("yearBox");
            let currentValue = parseInt(yearBox.value);
            yearBox.value = currentValue - 1;
            filterDataByYear(currentValue - 1);
        }


        function filterDataByYear(year) {
            const quarterlySales = calculateQuarterlySales(year);

            // Update the year displayed in the year span
            document.getElementById('yearSpan').innerText = " | " + year;

            // Extract x and y values from quarterlySales object
            const xValues = Object.keys(quarterlySales);
            const yValues = Object.values(quarterlySales);

            // Render the bar chart with filtered data
            renderBarChart(xValues, yValues);
        }

        //function for loading barchart
        function renderBarChart(xValues, yValues) {
            const chartContainer = document.querySelector("#barChart");
            // Check if all quarters have 0 sales
            const totalSales = yValues.reduce((acc, curr) => acc + curr, 0);

            if (totalSales === 0) {
                chartContainer.innerHTML = "<div class='text-center'>Not enough data</div>";
            } else {
                if (barChart) {
                    barChart.destroy();
                }
                barChart = new ApexCharts(chartContainer, {
                    series: [{
                        name: "Sale",
                        data: yValues,
                    }],
                    chart: {
                        type: "bar",
                        height: 350,
                    },
                    colors: ['#FE7E00'], // Ensure the color is specified as an array of strings
                    xaxis: {
                        categories: xValues,
                    },
                });
                barChart.render();
            }
        }
    </script>
}
