@page
@model AutoArsenal_App.Pages.Manager.CustomersModel
@{
    ViewData["Title"] = "Customers";
}

<div class="pagetitle">
    <h1>@ViewData["Title"]</h1>
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item active" aria-current="page">
                <a asp-page="../Index">Home</a>
            </li>
            <li class="breadcrumb-item active" aria-current="page">@ViewData["Title"]</li>
        </ol>
    </nav>
</div>
<!-- Error message -->
@if (TempData["ErrorOnServer"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        Error: @TempData["ErrorOnServer"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
<!-- End Error message -->
<!-- Search Bar -->
<div class="card">
    <div class="card-body">
        <div id="panelSearch"
             class="d-flex justify-content-between align-items-center">
            <form class="form-inline flex-grow-1 mr-2" id="searchBar">
                <input class="form-control w-100"
                       type="search"
                       placeholder="Search"
                       aria-label="Search" />
            </form>
            <div>
                <div class="form-check">
                    <input class="form-check-input"
                           type="radio"
                           name="exampleRadios"
                           id="activeRadio"
                           value="active"
                           checked />
                    <label class="form-check-label" for="exampleRadios1">Active</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input"
                           type="radio"
                           name="exampleRadios"
                           id="inactiveRadio"
                           value="inactive" />
                    <label class="form-check-label" for="exampleRadios2">InActive</label>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="card">
    <div class="card-body">
        <h5 class="card-title">Customers</h5>
        <div class="table-responsive">
            <!-- Table with stripped rows -->
            <table id="customersTable" class="table table-hover table-striped table-bordered text-center">
                <thead class="table-dark">
                    <!-- Dynamically generated headers will be added here -->
                </thead>
                <tbody class="table-group-divider">
                    <!-- Data will be loaded automatically -->
                </tbody>
            </table>
            <!-- End Table with stripped rows -->
        </div>
    </div>
</div>



<!--Delete Confirmation Modal-->
<div class="modal fade" id="deleteCustomerModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" asp-page-handler="DeleteCustomer">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel"><i class="bi bi-trash"></i> Delete Employee</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="deleteId" asp-for="DeleteID" />
                    <p>Are you sure you want to delete this customer?</p>
                    <p>Customer Name: <b id="deleteTitle"></b></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Delete</button>
                </div>
            </form>
        </div>
    </div>
</div>
<!-- End Delete Confirmation Modal-->
@section Scripts {
    <script>
        function deleteCustomer(id, firstName, lastName) {
            document.getElementById("deleteId").value = id;
            document.getElementById("deleteTitle").textContent = firstName + ' ' + lastName;
        }
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            loadCustomers("Active");
        });

        const lookups = @Html.Raw(Json.Serialize(Model.Lookups));
        const persons = @Html.Raw(Json.Serialize(Model.Persons));
        const customers = @Html.Raw(Json.Serialize(Model.Customers));

        const activeRadio = document.getElementById("activeRadio");
        const inactiveRadio = document.getElementById("inactiveRadio");

        activeRadio.addEventListener("change", function () {
            loadCustomers("Active");
        });

        inactiveRadio.addEventListener("change", function () {
            loadCustomers("Inactive");
        });

        function loadCustomers(status) {
            const customersTable = document.getElementById("customersTable");
            const customersTableBody = customersTable.getElementsByTagName("tbody")[0];
            const customersTableHeader = customersTable.getElementsByTagName("thead")[0];
            customersTableBody.innerHTML = "";

            // Dynamically adjust table headers based on status
            customersTableHeader.innerHTML = `
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Name</th>
                                    <th scope="col">Gender</th>
                                    <th scope="col">Contact</th>
                                    <th scope="col">Address</th>
                                    <th scope="col">Trustworthy</th>
                                    <th scope="col">Credit</th>
                                    ${status === "Active" ? '<th scope="col">Actions</th>' : ''}
                                </tr>
                            `;

            const filteredCustomers = [];
            customers.forEach(customer => {
                const person = persons.find(person => person.id === customer.id);
                const statusType = lookups.find(lookup => lookup.id === person.status).value;
                if (person && status === statusType) {
                    filteredCustomers.push(customer);
                }
            });
            displayCustomers(filteredCustomers, status);
        }

        function displayCustomers(customers, status) {
            const customersTableBody = document.getElementById("customersTable").getElementsByTagName("tbody")[0];

            // empty handling
            if (customers.length === 0) {
                const row = document.createElement("tr");
                row.innerHTML = `<td colspan="${status === 'Active' ? '8' : '7'}">No data available</td>`;
                customersTableBody.appendChild(row);
                return;
            }

            customersTableBody.innerHTML = "";
            customers.forEach((customer, index) => {
                const person = persons.find(person => person.id === customer.id);
                const statusType = lookups.find(lookup => lookup.id === person.status).value;
                const gender = lookups.find(lookup => lookup.id === person.gender).value;
                const row = document.createElement("tr");

                if (statusType === "Active") {
                    row.innerHTML = `
                                        <th>${index + 1}</th>
                                        <td>${person.firstName + ' ' + person.lastName}</td>
                                        <td>${gender}</td>
                                        <td>${person.contact}</td>
                                        <td>${person.streetAddress + ', ' + person.city + ', ' + person.province + ', ' + person.country}</td>
                                        <td>${customer.isTrustworthy ? '<span class="badge bg-success text-white" style="font-weight:bolder; font-size:14px;padding:6px;">Yes</span>' : '<span class="badge bg-danger text-white" style="font-weight:bolder; font-size:14px;padding:6px;">No</span>'}</td>
                                        <td>${customer.credit}</td>
                                        <td>
                                                                    ${customer.isTrustworthy ? '<button class= "btn btn-warning btn-sm" > <i class="bi bi-hand-thumbs-down-fill"></i></button >' : '<button class= "btn btn-success btn-sm" > <i class="bi bi-hand-thumbs-up-fill"></i></button >'}
                                            <button class="btn btn-danger btn-sm" data-bs-toggle="modal" data-bs-target="#deleteCustomerModal" onclick="deleteCustomer('${customer.id}','${person.firstName}','${person.lastName}')"><i class="bi bi-trash"></i></button>
                                        </td>
                                    `;
                } else {
                    row.innerHTML = `
                                        <th>${index + 1}</th>
                                        <td>${person.firstName + ' ' + person.lastName}</td>
                                        <td>${gender}</td>
                                        <td>${person.contact}</td>
                                        <td>${person.streetAddress + ', ' + person.city + ', ' + person.province + ', ' + person.country}</td>
                                        <td>${customer.isTrustworthy ? '<span class="badge bg-success text-white" style="font-weight:bolder; font-size:14px;padding:6px;">Yes</span>' : '<span class="badge bg-danger text-white" style="font-weight:bolder; font-size:14px;padding:6px;">No</span>'}</td>
                                        <td>${customer.credit}</td>
                                    `;
                }
                customersTableBody.appendChild(row);
            });
        }
    </script>

    <script>
        $(document).ready(function () {
            var table = $("#customersTable").DataTable({
                paging: true,
                lengthChange: false,
                searching: true,
                ordering: true,
                info: true,
                autoWidth: false,
                language: {
                    emptyTable: "No data available",
                    info: "Showing _START_ to _END_ of _TOTAL_ entries",
                    infoEmpty: "Showing 0 to 0 of 0 entries",
                    infoFiltered: "(filtered from _MAX_ total entries)",
                    zeroRecords: "No matching records found",
                    search: "Search:",
                },
            });

            // Add event listener for your custom search bar
            $('#searchBar input').on('input', function () {
                var searchText = this.value.trim();
                table.search(searchText).draw();
            });
        });
    </script>
}
